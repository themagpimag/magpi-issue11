An Introduction to Charm Data Types
===================================
Computers can accurately and quickly manage, manipulate and transform information in accordance with sets of coded instructions packaged into operating systems and programs. In this article of the Charm series I am going to concentrate on how Charm defines and handles different types of data used to represent that information.

Basic Data Types
----------------
Currently Charm defines four intrinsic types of data as shown in the following table:

<basic.png>

#boolean# values represent flags that are either #true# or #false#, and strictly speaking only require one bit of data. It is possible to combine up to 8 boolean flags in a #char# or 32 flags in an #int# using the Charm bit operators. For convenience and speed however, the compiler does not attempt to pack #boolean# definitions together but stores each in its own byte location which is the smallest unit of memory the ARM CPU can directly address.

#char# values represent single characters using the ubiquitous ASCII code. Some characters are non-printing and for historical reasons these are known as control characters, the most common being space (32), tab (9), linefeed (10) and carriage return (13).

#int# values represent signed 32 bit numbers in the range - 2147483648 to 2147483647 with negative numbers having the top bit set.

When handling #real# numbers Charm will use IEEE double precision floating point if VFP support is enabled, or extended precision if using the standard RISCOS floating point emulator. Note that at the cost of a few trailing digits, floating point operations complete an order of magnitude faster with VFP support as they are performed in hardware rather than software.

Constants
---------
Charm allows constant values of basic types to be named using the #const# keyword. By convention the source code in the Charm distribution uses upper case with an underscore delimeter between words for constant names. The type of the constant is inferred from the value it is assigned (using BNF notation) as follows:

* #[true | false]# - #boolean#
* #'?'# - #char# e.g. #'Q'#
* #[+ | -] [0 - 9]+# - #int# e.g. -123
* #[+ | -] [0 - 9]+ . [0 - 9]+ [e [+ | -] [0 - 9]+]# - #real# e.g 2.345e-6

The #hex# and #bin# prefixes introduce constants that are coded in hexadecimal (#[0 - 9, A - F]+#) or binary (#[0 , 1]+#) number bases e.g. #hex 20# or #bin 100000# for the space character.

Non printing characters which are not part of the Charm language per se can be included as character data by escaping them using the #'\'# character e.g.

* #'\t'# - tab 
* #'\n'# - carriage return 
* #'\\'# - backslash 

Note that constants may contain expressions and these may reference other constants as long as the result of the expression can be resolved at compile time e.g.

#const  ROWS = 4, COLUMNS = 6,  CELLS = ROWS * COLUMNS;#

Variables
---------
A Charm variable must be declared before it can be used. In the declaration the variable is given both a name (conventionally lower case with an underscore delimiter between words and starting with a #z# for a pointer) and a type. Variables can be declared to be of either a basic or more complex type, with complex data types being derived from basic types in a number of ways:

* by homogeneous aggregation using the #array# keyword.
* by hetrogenous aggregation using the #record# keyword or using #module# level #dynamic# data declarations.
* by using the #ref# keyword prefix to create a reference (or pointer) to a variable of a given type.

Arrays contain data collections accessed using an index that runs from 0 to one less than the size of the array using square bracket notation e.g. #variable [ index ]#. The index must resolve to type integer.

Records contain a collection of typed fields each of which is given a different name within the record name space so that it can be accessed in the form #<record name>.<field name># where by convention record name is in camel case. Dynamic module data can be access in a similar fashion as #<ref module name>.<variable name># where the module name reference may be #this# if inside a #dynamic# procedure.

#ref# type pointer variables are automatically dereferenced by Charm when the variable to which they point is accessed. Variables of complex data type are always passed by reference to procedures though they can be declared directly as static or stack based variables. While the #proc# keyword introduces procedural code, it is possible to declare variables of type #ref proc# that point to procedures and to execute those procedures via their pointers if the correct signature is adhered to. Note that since procedures can optionally return a value of a specified type using the #return# keyword in which case calls to them can be substituted in expressions for a variable of that type.

Variables of type #ref# can be assigned the special value #nil# which means that they are not currently pointing anywhere. When set to this value an attempt to use them to access data will result in a runtime exception, however they can still safely be compared with the #nil# value to see whether they contain a valid reference.

Strings
-------
Now let's take a closer look at a particularly prevelant type within Charm, namely #ref array char# to point to a string:

#array [] char hello = ('H', 'e', 'l', 'l', 'o', 0);#
#ref array char hello_string = hello;#

where the relevant portion of the Charm compiler type tree is:

<tree.png>

We can output this to the screen on a line of its own using the standard #vdu# stream of the #Out# library module as follows:

#Out.vdu.str (hello_string).nl ();#

A few points to note are:

* All strings are terminated by a zero character.
* The length of the string array is implicitly calculated by the compiler, however if it were to be explicitly entered it would be #[6]# to accommodate the terminating zero.
* Characters can be extracted from the string using an array index starting from 0 and running to one less than the string length, for instance #hello_string[1]# contains #'e'#.

Since strings are used so much, the compiler associates the type of a string literal such as #"Hello"# with type #ref array char# and automatically adds the trailing zero, so more concisely we can write:

#ref array char hello_string = "Hello";#

The story on strings does not end there, as the Charm libraries contain a #String# module that can hold a dynamic instance of a modifiable string. This is held in the heap, can grow as required, and is automatically released by the #String# destructor when the #String# object goes out of 'scope' (see below).

Type Conversions
----------------
In general the compiler will not allow variables of different types to be combined in assignments or expressions since this frequently this makes no sense e.g. assigning a #real# to a #boolean#. The three arithmetic types #char#, #int# and #real# can however be mixed, and the compiler will generate a result of the widest width (greatest number of bits) of the operands. You may also mix these types on the left and right of assignment statements, however watch out for loss of precision if the left hand side is narrower than the result being assigned to it.

Charm does permit a couple of powerful casting operations through the #address (variable)# construct which can convert a variable of any type to an integer and the #[ int ]# construct which can convert an integer to any type. With great power comes great responsibility however, so these are used but rarely and then with care. You can see an example in the Charm #debug# library module which casts the heap address to an array of bytes so that their contents can be dumped to a file.

Scope
-----
The scope of a variable relates to from where it is accessible and is associated with its lifecycle. A variable can reside in one of the following places:

<scope.png>

Variables declared statically exist for the lifetime of the program and are initialised at compile time, by default to zero or #nil# for references. Variables declared on the heap are created by the #new# operator and released using the #delete# operator when no longer needed. Variables on the stack exist until their containing scope is released. Typically this is when a procedure exits, or execution of a block of code between #{# and #}# delimiters finishes.

The specially named #~startup# and #~shutdown# procedures can assist with setting up static variables, and the #~new# and #~delete# procedures can help with setting up heap and stack based variables when more than a single compile or run time assignment is required.

Importantly for information hiding, by default constants, variables and procedures are only accessible from within the module in which they are declared. By using the #export# keyword however, it is possible to make these definitions publicly available to other modules. Referencing modules are required to explicitly state their dependencies using the #import# keyword to state each module whose public definitions they wish to use. Such references must then be qualified with the name of the imported module e.g. #Out.vdu.str# refers to the #str# procedure of the #vdu# record in the #Out# library used to output strings to the screen.

Next time I intend to cover some of the coding side of Charm including writing expressions and flow of control statements.

Exercise
--------
Finally for this month's exercise try I suggest replacing the default #!NewProject# #MyProject# module with the following code to output square roots for the first dozen integers calculated using the Newton Raphson method:

#import lib.Out;

module MyProject
{
    proc sqrt (int n) real
    {
        real v := 1;
        for int i := 0 step inc (i) while i < 5 v := (v + n / v) / 2;
        return v;
    }

    export proc start (ref array ref array char argv)
    {
        for int i := 1 step inc (i) while i <= 12
            Out.vdu.str ("sqrt ").num_fld (i, 2).str (" = ").float_fld (sqrt (i), 10).nl ();
    }
}#
  

